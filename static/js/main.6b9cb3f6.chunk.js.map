{"version":3,"sources":["actions/action.js","Component/search.js","Component/card.js","Component/App.js","serviceWorker.js","reducer/reducer.js","index.js"],"names":["Actions","LoadData","UpdateSearchValue","UpdateFilteredData","UpdateCardCount","SearchBox","e","this","props","onUpdateSearchValue","target","value","tweetsData","searchValue","onSearch","className","key","placeholder","type","onChange","searchBoxChange","bind","onClick","searchButtonClick","React","Component","connect","state","filteredData","dispatch","doUpdateSearchValue","filter","p","text","includes","doSearch","Content","data","is_quote_status","quoted_status","retweeted_status","class","Card","cardCount","map","index","console","log","style","src","user","profile_image_url_https","alt","paddingLeft","name","screen_name","hasOwnProperty","entities","media","media_url_https","height","sizes","small","h","width","tweetsDataFile","require","App","onLoadInitData","length","onLoadMore","fileData","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b9cb3f6.chunk.js","sourcesContent":["\r\nexport const Actions = {\r\n\tLoadData: \"Actions.LoadData\",\r\n\tUpdateSearchValue: \"Actions.UpdateSearchValue\",\r\n\tUpdateFilteredData: \"Actions.UpdateFilteredData\",\r\n\tUpdateCardCount: \"Actions.UpdateCardCount\"\r\n}\r\n\r\nexport function doLoadInitData(fileData) {\r\n\treturn {\r\n\t\ttype: Actions.LoadData,\r\n\t\tdata: fileData\r\n\t}\r\n}\r\n\r\nexport function doUpdateSearchValue(value) {\r\n\treturn {\r\n\t\ttype: Actions.UpdateSearchValue,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nexport function doSearch(value, tweetsData) {\r\n\tif (value) {\r\n\t\tconst filteredData = tweetsData.filter(p => p.text.includes(value));\r\n\t\treturn {\r\n\t\t\ttype: Actions.UpdateFilteredData,\r\n\t\t\tfilteredData\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\ttype: Actions.UpdateFilteredData,\r\n\t\t\tfilteredData: []\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function doLoadMore() {\r\n\treturn {\r\n\t\ttype: Actions.UpdateCardCount\r\n\t}\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { doUpdateSearchValue, doSearch } from \"../actions/action\"\r\n\r\nclass SearchBox extends React.Component {\r\n\r\n\tsearchBoxChange(e) {\r\n\t\tthis.props.onUpdateSearchValue(e.target.value);\r\n\t}\r\n\r\n\tsearchButtonClick() {\r\n\t\tconst { tweetsData, searchValue } = this.props;\r\n\t\tthis.props.onSearch(searchValue, tweetsData);\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"m-2\">\r\n\t\t\t\t<input key=\"searchBox\" className=\"m-1\" placeholder=\"Search Tweets\" value={this.props.searchValue} type=\"text\" onChange={this.searchBoxChange.bind(this)} />\r\n\t\t\t\t<button className=\"rounded-pill btn btn-light\" onClick={this.searchButtonClick.bind(this)}>Search</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\ttweetsData: state.tweetsData,\r\n\t\tsearchValue: state.searchValue,\r\n\t\tfilteredData: state.filteredData\r\n\t};\r\n};\r\nconst mapDispatchToprops = (dispatch) => {\r\n\treturn {\r\n\t\tonUpdateSearchValue: (value) => dispatch(doUpdateSearchValue(value)),\r\n\t\tonSearch: (value, tweetsData) => dispatch(doSearch(value, tweetsData))\r\n\t}\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToprops)(SearchBox)\r\n\r\n// export default SearchBox","import React from 'react';\r\n\r\nconst Content = (props) => {\r\n\tconst { data } = props;\r\n\tconst { is_quote_status, quoted_status, retweeted_status } = data;\r\n\tlet text = is_quote_status ? quoted_status && quoted_status.text : retweeted_status && retweeted_status.text;\r\n\ttext = text ? text : data.text\r\n\treturn <p class=\"card-text\">{text}</p>;\r\n}\r\n\r\nclass Card extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst { filteredData, cardCount } = this.props;\r\n\r\n\t\treturn filteredData.map((p, index) => {\r\n\t\t\tconsole.log(p)\r\n\t\t\tif (cardCount >= index + 1) {\r\n\t\t\t\treturn <div className=\"card m-2\" style={{ \"width\": \"20rem\" }}>\r\n\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t<img src={p.user.profile_image_url_https} alt=\"profile image\" class=\"rounded-circle\" />\r\n\t\t\t\t\t\t<h5 className=\"card-title\" style={{ \"display\": \"inline-flex\", paddingLeft: \"4px\" }}>{p.user.name}</h5>\r\n\t\t\t\t\t\t<h6 className=\"card-subtitle mb-2 text-muted\" style={{ paddingLeft: \"45px\" }} >@{p.user.screen_name}</h6>\r\n\t\t\t\t\t\t<Content data={p} />\r\n\t\t\t\t\t\t{/* <p class=\"card-text\">{p.hasOwnProperty(\"quoted_status\") ? p.quoted_status.text : p.hasOwnProperty(\"retweeted_status\") ? p.retweeted_status.text : p.text}</p> */}\r\n\t\t\t\t\t\t{p.hasOwnProperty(\"quoted_status\") && p.quoted_status.entities.hasOwnProperty(\"media\") && p.quoted_status.entities.media[0].type === \"photo\" &&\r\n\t\t\t\t\t\t\t<img src={p.quoted_status.entities.media[0].media_url_https} style={{ height: `${p.quoted_status.entities.media[0].sizes.small.h}px`, width: `18rem` }} />\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport default Card;","import React from 'react';\nimport { connect } from 'react-redux'\n// import logo from './logo.svg';\n// import './App.css';\nimport SearchBox from \"./search\";\nimport Card from \"./card\";\nimport { doLoadInitData, doLoadMore } from \"../actions/action\";\n\nconst tweetsDataFile = require(\"../tweetsData.json\");\n\nclass App extends React.Component {\n\n\tcomponentWillMount() {\n\t\tthis.props.onLoadInitData(tweetsDataFile);\n\t}\n\n\trender() {\n\t\tconsole.log(this.props);\n\t\tconst { filteredData, cardCount } = this.props;\n\t\treturn (\n\t\t\t<div className=\" App\">\n\t\t\t\t{/* <header className=\"App-header\">\n\t\t\t\t\t\n\t\t\t\t</header> */}\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t<div className=\"\">\n\t\t\t\t\t\t<SearchBox />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"row justify-content-center\">\n\t\t\t\t\t{filteredData && filteredData.length > 0 &&\n\t\t\t\t\t\t<Card filteredData={filteredData} cardCount={cardCount} />\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t{filteredData.length > cardCount &&\n\t\t\t\t\t<div className=\"d-flex justify-content-center m-2\">\n\t\t\t\t\t\t<button className=\"rounded-pill btn btn-light\" onClick={() => this.props.onLoadMore()} >Load More</button>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div >\n\t\t);\n\t}\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\ttweetsData: state.tweetsData,\n\t\tsearchValue: state.searchValue,\n\t\tfilteredData: state.filteredData,\n\t\tcardCount: state.cardCount,\n\t};\n};\nconst mapDispatchToprops = (dispatch) => {\n\treturn {\n\t\tonLoadInitData: (value) => dispatch(doLoadInitData(value)),\n\t\tonLoadMore: () => dispatch(doLoadMore())\n\t}\n}\nexport default connect(mapStateToProps, mapDispatchToprops)(App)\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Actions } from \"../actions/action\";\r\n\r\nconst initialState = {\r\n\ttweetsData: [],\r\n\tfilteredData: [],\r\n\tsearchValue: \"\",\r\n\tcardCount: 10,\r\n}\r\n\r\nfunction reducer(state = initialState, action) {\r\n\tswitch (action.type) {\r\n\t\tcase Actions.LoadData:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\ttweetsData: action.data,\r\n\t\t\t}\r\n\t\tcase Actions.UpdateSearchValue:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tsearchValue: action.value,\r\n\t\t\t}\r\n\t\tcase Actions.UpdateFilteredData:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tfilteredData: action.filteredData,\r\n\t\t\t\tcardCount: 10,\r\n\t\t\t}\r\n\t\tcase Actions.UpdateCardCount:\r\n\t\t\treturn {\r\n\t\t\t\t...state,\r\n\t\t\t\tcardCount: state.cardCount + 10,\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport './index.css';\nimport App from './Component/App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from \"./reducer/reducer\";\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}